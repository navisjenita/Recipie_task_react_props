'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var observable = require('@trpc/server/observable');
var transformResult = require('../transformResult-70f95ffb.js');
var httpUtils = require('../httpUtils-4e5cf721.js');

function httpLinkFactory(factoryOpts) {
    return (opts)=>{
        const resolvedOpts = httpUtils.resolveHTTPLinkOptions(opts);
        return (runtime)=>({ op  })=>observable.observable((observer)=>{
                    const { path , input , type  } = op;
                    const { promise , cancel  } = factoryOpts.requester({
                        ...resolvedOpts,
                        runtime,
                        type,
                        path,
                        input,
                        headers () {
                            if (!opts.headers) {
                                return {};
                            }
                            if (typeof opts.headers === 'function') {
                                return opts.headers({
                                    op
                                });
                            }
                            return opts.headers;
                        }
                    });
                    promise.then((res)=>{
                        const transformed = transformResult.transformResult(res.json, runtime);
                        if (!transformed.ok) {
                            observer.error(transformResult.TRPCClientError.from(transformed.error, {
                                meta: res.meta
                            }));
                            return;
                        }
                        observer.next({
                            context: res.meta,
                            result: transformed.result
                        });
                        observer.complete();
                    }).catch((cause)=>{
                        observer.error(transformResult.TRPCClientError.from(cause));
                    });
                    return ()=>{
                        cancel();
                    };
                });
    };
}
const httpLink = httpLinkFactory({
    requester: httpUtils.jsonHttpRequester
});

exports.httpLink = httpLink;
exports.httpLinkFactory = httpLinkFactory;
